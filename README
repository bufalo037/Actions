===============================================================================
									Costea Mihai 

===============================================================================
===============================================================================


								    Strategy

Input reading is done inside the main. Functions are chosen to resolve 
the solutioned command based on the read input. The interpretation of input 
lines as valid commands is made after a begin command was read and it ends once
an end command is read. Caution!! After the begin command was read, the
program is not allowed to take invalid input or the behaviour is undefined.

===============================================================================

A brief introduction to classes:

	Feed:
It's a class that remembers all the attributes needed for a feed to exist, such 
as name or value. Also, a couple of additional values will help it when an 
observer will wish to visit the feed to print the information. The feed will
have to let or not to let it print following the information it has joined with
the information the visitor has. 

===============================================================================

	Subject:
It is the subject from the observer pattern design. I implemented it together 
with a singleton because I thought they were going hand in hand. 
This one has as attributes a feeds TreeMap sorted by a lexicographical order
by their names (their names are the key). This is realized by an internal class
defined by me, STRCMP. I subsequently realized that this is redundant because 
the TreeMap was still sorting them in lexicographical order without giving it an
explicit comparator (a comparator would've been good the moment I would have 
liked to establish a relation other than the lexicographical order).
This object has the role to maintain feeds sorted in such way that once a new
observer appears, they are copied in order without the implementations of sorting
operations for them.

The observers are kept in a HashMap<Integer,Observer> type instance because their
order doesn't matter in any way. I presume the costs of a HashMap are smaller than
the costs of a TreeMap because of the sorting factor. 

The adding or removing operations are made by using this class, as well as the 
feed adding operations. 

The adding of observers is realized by using the observer factory. 

===============================================================================

	ObserversFactory:
This is the factory I was talking about in the last paragraph. All it does is 
create observers. Also, this is a singleton because multiple instances of this
object wouldn't make any sense.

===============================================================================

	Observer:
This is an abstract class that has a single FeedObserver child (just to keep 
the design pattern logic). A FeedObserver has the following attributes:
- feed which still is a TreeMap because of its property of sorting, adding and
removing elements in 0(1). Rpn will be initialized when the print method will 
be called. 
FeedObserver's methods:
-print which will create the Reversed Polish Notation for the observer's filter
-update which increases the number of modifications that were applied on a
feed from its last display or adds a new feed in TreeMap if necessary (the
number of modifications from the last print will be 0)
-visit which will want to access, based on the last available information in the
subject's Treemap, the feed given as a function's parameter for printing, 
having common keys for feeds. There is an objective function that transposes 
every subject's feed in another observer's feed and the transformation leaves 
the feed's name unchanged. The printing will be made only if the feed is
accepted by the observer.
===============================================================================

	Rpn:
A class that could have been made with a singleton design pattern. I chose to 
do all the statistical methods because I like this approach more when it comes 
to entities with a single goal. I chose to do this because in my opinion, a 
singleton should be used just for classes that make sense to be instanced just
once. However, I don't need an object to implement this class.

Methods:
-parse parses the filter and returns a strings ArrayList consisting of tokens.
Tokens are the atomic strings that a mathematical structure can have. 
-priority it simply is a metheod that assigns some priorities to the operands
parsed above for the the implementation of the algorithm's Shunting-Yard.
-make_rpn is a method that implements Shunting-Yard algorithm, it is nothing 
more than what is described as on its Wikipedia page.
The method returns a TreeMap<Integer,String> that represents the rpn.

===============================================================================

	Operations:
A class similar to the one presented previously from an implementation point of
view. 
Methods:
-call_operator receives 3 strings and interprets the first string as being an 
operator and interprets the other 2 strings as being the operator's operands 
in a left to right order. The called functions are presented in the rest of the
class.

===============================================================================

	Node:
Abstract class that is extended by the OperatorNode and Operand node. The only
methods that these classes have are the ones explained in the javadoc in the 
interfaces corresponding to the implementation methods. 

===============================================================================
===============================================================================
