===============================================================================
									Costea Mihai 
										322CB
===============================================================================
									  POO Tema2
===============================================================================
===============================================================================


								    Strategie

In main se face citirea inputului iar dupa urmeaza ca pe baza inputului citit 
sa se apeleze functii care rezolve comanda solutionata. Inceperea interpretarii
liniilor de input ca momenzi valide se face dupa ce a fost citita o linie cu 
comanda begin si se termina cand este citita o linie cu comanda end. 
Atentie!! dupa ce a fost citita comanda bein nu este permisa introducerea de
input invalid sau comportamentul programului este nedefinit


===============================================================================

A brief introduction to classes:

	Feed:
Este o clasa are tine minte toate atributele necesare unui feed ca sa 
existe, precum nume sau valoare si cateva variabile aditionale care il 
vor ajuta in momentul in care un observator va dori sa viziteze feed-ul ca
sa printeze informatiile, iar feedul va trebui sa il lase sau nu sa printeze
in urma informatilor pe care le are el impreunate cu inforatile pe care le
are visitatorul.

===============================================================================

	Subject:
Este subiectul din design pattern-ul observer, acesta l-am implementat impreuna
cu singleton deoarece mi se parea ca mergeau mana in mana.
Acesta are ca atribute un TreeMap de feeduri care sunt ordonate in ordine 
lexicografica dupa numele lor (numele lor este cheia). Acest fapt se realizeaza
prin intermediul clasei interne defnite de mine strcmp, pe care am realizat
ulterior ca este redundanta deoarece TreeMap-ul le ordona in ordine lexicografica
si fara sa ii dau un comparator explicit(ar fi fost bun un comparator in momentul
in care mi-as fi dorit sa stabilesc o alta relatie de ordine decat cea 
lexicografica). Acest obiect are rolul de a mentine feedurile sortate ca, cand
apare un nou observer, ele sa fie copiate in ordine fara sa fie implementate 
atunci operatii de sortare peste aceastea.

Observatori sunt tinuti intr-o instanta de tipul HashMap<Integer,Observer>,
deoarece nu conteaza ordinea acestora in vr-un fel iar presupun ca costurile
unui HashMap sunt ai mici decat ale unui TreeMap tocmai din cauza factorului de
sortare.

Operatiile de adaugare sau stergere de observatori sunt facute prin intermediul
acestei clase, precum si operatiile de adaugare de feeduri.

Adaugarea de observatori se realizeaza prin intermediul factory-ului de 
observatori

===============================================================================

	ObserversFactory:
Este factory-ul de care am discutat in ultimul paragraf, tot ce face este sa
creeze observatori, si deasemenea este si acesta singleton deoarece mai multe
instante ale acestui obiect nu aveau sens.

===============================================================================

	Observer:
Care este o clasa abstracta care are un singur copil FeedObserver (Doar ca sa
mentin logica design pattern-ului in picioare), iar FeedObserver are 
urmatoarele atribute:
- feed care est un TreeMap care se inititializeaza in 
momentul crearii unui observer cu valorile din Treemap-ul de feeduri pe care
il avea subject-ul
-rpn care este tot un TreeMap din cauza proprietatii sale de a sorta ,adauga
si sterge elemente in O(1). rnp va fi initializat cand se va apela metoda print
Metodele lui FeedObserver:
-print care va crea Reversed Polish Notation-ul pentru filtrul observerului
-update care creste numarul modificari care au fost aplicate asupra unui 
feed de la ultima afisare a acestuia sau adauga un nou feed in TreeMap daca
este necesar (numarul de modificari de la ultima printare va fi 0)
-visit care va dori sa acceseze bazat pe ultima informatie avalable in 
TreeMap-ul subiectului feedul dat ca parametru functiei pentru printare(avand
chei comune pentru feduri (Exista o functie bijectiva care transpune fiecare
feed al subiectului in alt feed al observatorului, iar transformarea lasa
numele feedului neschibat)). Printarea se va face doar daca feedul a aceptat
observatorul.

===============================================================================

	Rpn:
O clasa care ar fi putut sa fie facuta cu singleton design pattern de altfel
am ales sa ii fac toate metodele statice deoarece imi place mai mult aceasta 
abordare cand vine vorba de entitati care au un singur scop. Scopul 
singleton-ului mi se pare doar cand ai avea o clasa cu metode statice si pe 
deasupra are sens si o instantiere unica a acesteia, caz care nu se intalneste 
la rpn.
Metode:
-parse parseaza filtrul si returneaza un ArrayList de strings format din tokene
Tokenele sunt stringurile atomice pe care le poate avea o structura matematica.
-priority e pur si simplu o metoda care asigneaza niste prioritati operanzilor
parsati mai sus, pentru implementarea Shunting-yard algorithm-ului.
-make_rpn este o metoda care implementeaza Shunting-yard algorithm, nu e nimic
mai mult decat ce scrie pe wikipedia despre acesta(link-ul din eneunt).
Metoda intoarce un TreeMap<Integer,String> care reprezinta rpn-ul.

===============================================================================

	Operations:
O clasa similara cu cea prezentata anterio din punctul de veere al implementarii.
Metode:
-call_operator care primeste 3 stringuri si interpreteaza primul string ca fiind
un operator iar celelalte 2 stringuri le interpreteaza ca fiind operanzii 
operatorului in ordine de la stanga la dreapta. Functiile apelate sunt prezentate
in restul clasei si fac exact ceea ce scrie in enuntul temei ca fac.

===============================================================================

	Node:
Clasa abstracta care este extinsa de OperatorNode si Operand node.
Singurele metode pe care le au aceste clase sunt metodele care au fost explicate
de altfel in javadoc la interfetele corespunzatoare metodelor implementate.

===============================================================================
===============================================================================

Interfetele au fost explicate in javadoc. 

Deasemenea am o intrebare: era musai sa fac un arbore ? Deoarece se putea rezolva,
chiar mai eficient fara un arbore, pur si simplu rezolvam rpn-ul, fara sa ma 
chinui cu arbori. Asta a fost prima mea implementare, si o sa o atasez si pe 
aceasta temei. Ea se gaseste in fisieul Feed.oldjava (care ar trebui sa 
inlocuiasca fisierul existent Feed.java). Pun aceasta intrebare deoarece ati zis
ca motivul pentru care facem un arbore este ca sa implementam visitor design 
pattern dar eu l-am mai implementat odata in aceasta tema(cand verificam daca 
se poate printa sau nu feed pentru un observer).

===============================================================================
===============================================================================

